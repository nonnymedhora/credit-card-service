/**
 * 
 */
package org.bawaweb.server.crypt;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

import org.jasypt.encryption.pbe.StandardPBEBigIntegerEncryptor;
import org.jasypt.salt.FixedStringSaltGenerator;

/**
 * @author medhoran
 *
 */
public final class CreditCardEncrypter {
	
	private final static StandardPBEBigIntegerEncryptor numberEncryptor;
	
	private static final String PASSWORD_STR = "abcdefghijklmnopqrstuvxyz";
	private static final String ALGORITHM_STR = "PBEWithMD5AndTripleDES";
	
	private static final String SALT_STR = "564732ijebrfgvbncjxidudfyrg";
	
	private CreditCardEncrypter(){}
	
	static {
		numberEncryptor = new StandardPBEBigIntegerEncryptor();
		
		numberEncryptor.setPassword(PASSWORD_STR);
		numberEncryptor.setAlgorithm(ALGORITHM_STR);
		
		
		FixedStringSaltGenerator generator = new FixedStringSaltGenerator();
		generator.setSalt("SALT_STR");
		numberEncryptor.setSaltGenerator(generator);
	}
	
	
	public static String encryptCardNumber(String cardNumber) {
		System.out.println("Number to encrypt [card number] is " + cardNumber);
		StandardPBEBigIntegerEncryptor numberEncryptor = new StandardPBEBigIntegerEncryptor();
		numberEncryptor.setPassword("abcdefg");
		numberEncryptor.setAlgorithm("PBEWithMD5AndTripleDES");
		BigInteger encryptedNumber = null;
		do {
			encryptedNumber = numberEncryptor.encrypt(new BigInteger(cardNumber));

			System.out.println("for number " + cardNumber + " encrypted number val is " + encryptedNumber.longValue() + " and it is " + encryptedNumber);
		} while (encryptedNumber.longValue() < 0);
		
//		System.out.println("for number " + cardNumber + " encrypted number is " + encryptedNumber);

		return encryptedNumber.toString();
	}	
	
	
	public static String decryptCardNumber(String encryptedCardNumber) {
		System.out.println("Number to decrypt[encryptedCardNumber] is  " + encryptedCardNumber);
		StandardPBEBigIntegerEncryptor numberEncryptor = new StandardPBEBigIntegerEncryptor();		
		numberEncryptor.setPassword("abcdefg");
		numberEncryptor.setAlgorithm("PBEWithMD5AndTripleDES");
		BigInteger decryptedNumber = numberEncryptor.decrypt(new BigInteger(encryptedCardNumber));
			
		System.out.println("for encryptednumber " + encryptedCardNumber + " decrypted number is " + decryptedNumber);
		return decryptedNumber.toString();
	}
	

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		CreditCardEncrypter cce = new CreditCardEncrypter();
		final String psswd = "abcdefghijklmnopqrstuvxyz";
		
		String number = "1111111111111111";
		System.out.println("Testing number " + number);
		
		String encStr = cce.encryptCardNumber(number);
		System.out.println("Encrypted number is " + encStr);
		/*
		String decStr = cce.decryptCardNumber(encStr);
		System.out.println("Decrypted number is " + decStr);
		

		ArrayList<String> numbers = new ArrayList<String>();
		numbers.add("123456734545");
		numbers.add("12334673453445");
		numbers.add("12234567345456");
		numbers.add("1230987734456");
		numbers.add("1234765543456");
		numbers.add("12342342344565");
		numbers.add("1239875434356");
		numbers.add("12654373423455");
		numbers.add("12345677472345");
		numbers.add("12345677632455");
		
		HashMap<String, String> numMap = new HashMap<String, String>();
		
		for (int i = 0; i < numbers.size(); i++) {
			String s = numbers.get(i);
			
			String enc = CreditCardEncrypter.encryptCardNumber(s);
			
			numMap.put(enc, s);
			
			BigInteger b = new BigInteger(enc);
		}
		
		Set<String> encKeys = numMap.keySet();
		
		Iterator<String> it = encKeys.iterator();
		while ( it.hasNext() ) {
			String s = it.next();
			
			String dec = CreditCardEncrypter.decryptCardNumber(s);
			
			if ( !dec.equals(numMap.get(s))) {
				System.out.println("number entered was " + numMap.get(s) + " encrypted value was " + s + " and decrypted value was " + dec);
			}
			
			BigInteger b = new BigInteger(dec);
		}
		*/
		System.out.println("All clear");

	}

}
/**
new JasyptURLEncryptionConfigurator() {

08. 

09.public void configure(StandardPBEStringEncryptor encryptor) {

10.encryptor.setAlgorithm("PBEWithMD5AndDES");

11.encryptor.setPassword("jasypt");

12.FixedStringSaltGenerator generator = new FixedStringSaltGenerator();

13.generator.setSalt("tapestry5");

14.encryptor.setSaltGenerator(generator);

15.encryptor.setStringOutputType("hexadecimal");

16.}

17.});**/